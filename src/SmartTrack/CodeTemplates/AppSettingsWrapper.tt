<#@ template language="C#" debug="true" hostspecific="True"#>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Configuration" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".gen.cs" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
using System.Configuration;
using System.ComponentModel;

public enum BuildConfigurations 
{
<# 
	var serviceProvider = Host as IServiceProvider;
		var dte = serviceProvider.GetService(typeof(DTE)) as DTE;
		var configs = dte.Solution.SolutionBuild.SolutionConfigurations;
		var enumerator = configs.GetEnumerator();
		var i = 0;
		var count = configs.Count;
		while (enumerator.MoveNext())
		{
			var config = enumerator.Current as SolutionConfiguration;
			#>
	[Description("<#= config.Name #>")]
	<#= config.Name.Replace(".", "") #><# if (++i < count) {#>,

<# } #>
<#
		}
#>

}

public interface IAppSettings 
{
<# 	
    string configFilePath = Host.ResolvePath("../web.Config");
	
	XDocument xmlDoc = XDocument.Load(configFilePath);
	
	List<XElement> elements = (from settings in xmlDoc.Descendants("appSettings")
                                select settings.Element("add")).ToList();

    var attributes = (from settings in xmlDoc.Descendants("appSettings")
                        from add in settings.Elements("add")
                        from atts in add.Attributes("key")
                        select atts.Value);

foreach (var attribute in attributes)
{
#>
    string <#= attribute #> { get; }
<#
}
#>
}

public class AppSettingsWrapper : IAppSettings
{
<# 

foreach (var attribute in attributes)
{
#>
    public virtual string <#= attribute #> { get { return ConfigurationManager.AppSettings["<#= attribute #>"]; } }
<#
}
#>
}